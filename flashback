### üß© Pr√©sentation du projet : Apex Collector
- **Objectif principal** :  

**Apex Collector** est une application web construite avec **Next.js** et **TypeScript**, d√©di√©e √† la collection de voitures sous forme de cartes √† jouer interactives. Chaque carte affiche les sp√©cifications techniques d‚Äôun v√©hicule, avec une image associ√©e, des badges et des statistiques.

- **Public cible** :  
Fans d'automobile

### üéØ Objectif principal
Cr√©er une interface immersive pour les passionn√©s d‚Äôautomobile, permettant de :
#NOM?
#NOM?
- Offrir une exp√©rience fluide et responsive, avec un design soign√©

- **Fonctionnalit√©s cl√©s** :
  - Tableau de bord personnalis√©
  - Historique des parties
  - Statistiques d√©taill√©es (K/D, winrate, etc.)
  - Comparaison avec d'autres joueurs
  - Alertes de performance ou progression

- **Technologies envisag√©es** :
  - Frontend : React / Vue.js
  - Backend : Node.js / Python (FastAPI)
  - Base de donn√©es : PostgreSQL / MongoDB
  - API : utilisation de l‚ÄôAPI d‚ÄôApex Legends (si disponible) ou scrapping

- **Design & UX** :
  - Interface sombre type gentleman driver
  - Responsive pour mobile et desktop
  - Graphiques interactifs (D3.js ou Chart.js)


---

## üß± Stack Technique

| √âl√©ment              | D√©tail                                                                 |
|----------------------|------------------------------------------------------------------------|
| Framework            | Next.js (rendu client via `'use client'`)                              |
| Langage              | TypeScript                                                             |
| Styling              | Tailwind CSS                                                           |
| Fonts                | Google Fonts ‚Äì Rajdhani                                                |
| Images               | `next/image` pour optimisation                                         |
| State Management     | Context API (`CardModalContext`)                                       |
| Utilitaires          | `clsx` pour les classes conditionnelles                                |

---


- **Composant `Card`** :
  - Affiche les donn√©es techniques : puissance, couple, vitesse max, acc√©l√©ration, poids, transmission
  - Calcule un indice de performance (IP) bas√© sur la puissance et le poids
  - Affiche des badges de niveau (`CardLevelBadge`) et d‚ÄôIP (`IPBadge`)
  - Utilise des ic√¥nes SVG pour les stats
  - Responsive avec deux tailles : `md` et `lg`

- **Gestion des images** :
  - Les images des voitures sont stock√©es dans `public/images/cards/`
  - Le nom de chaque image suit la logique : `marque-modele-ann√©e.jpg` (ex. `ferrari-f50-1995.jpg`)
  - Le chemin est g√©n√©r√© dynamiquement dans le composant √† partir des props
  - Les noms sont nettoy√©s (minuscules, tirets, sans accents) pour correspondre aux fichiers

- **Fallback automatique** :
  - Si une image personnalis√©e n‚Äôest pas trouv√©e, une image par d√©faut est utilis√©e (`default.jpg`)
  - Le fallback est g√©r√© ailleurs dans l‚Äôapp (pas dans le composant `Card` directement)

- **Context API** :
  - Utilisation de `CardModalContext` pour g√©rer l‚Äô√©tat actif d‚Äôune carte s√©lectionn√©e




## üì¶ Structure des Donn√©es

Le composant `Card` re√ßoit les props suivantes :

```ts
type CardProps = {
  make: string
  model: string
  year: string
  power_hp: string
  torque_nm: string
  max_speed_kmh: string
  acceleration_0_100: string
  weight_t: string
  transmission?: 'FWD' | 'RWD' | 'AWD'
  count?: number
  size?: 'md' | 'lg'
  showLevel?: boolean
}
```

---

## üñºÔ∏è Gestion des Images

- Les images sont stock√©es dans `public/images/cards/`
- Convention de nommage : `marque-modele-ann√©e.jpg`  
  ‚Üí Exemple : `ferrari-f50-1995.jpg`
- Le chemin est g√©n√©r√© dynamiquement √† partir des props :

```ts
const clean = (str: string) =>
  str.normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/\s+/g, '-')
    .toLowerCase()

const imageName = `${clean(make)}-${clean(model)}-${year}.jpg`
const imageSrc = `/images/cards/${imageName}`
```

- Le fallback vers une image par d√©faut (`default.jpg`) est g√©r√© ailleurs dans l‚Äôapplication

---

## üìä Calculs Dynamiques

- **Indice de performance (IP)** : bas√© sur la puissance et le poids

```ts
const ip = parsedPower && parsedWeight
  ? Math.floor((parsedPower / (parsedWeight * 1000)) * 1000)
###############################################################################################################################################################################################################################################################
```

- Affich√© via le composant `<IPBadge />`

---

## üß© Composants Int√©gr√©s

- `CardLevelBadge` : badge de niveau (ex. raret√©)
- `IPBadge` : badge de performance
- `Stat` : ic√¥ne + valeur pour chaque caract√©ristique
- `CardModalContext` : permet d‚Äôouvrir une carte en modal via `setActiveCard`

---

## üß™ Probl√®me Rencontr√©

- Les images personnalis√©es ne s‚Äôaffichaient plus, seule l‚Äôimage par d√©faut apparaissait
- Cause identifi√©e : la logique initiale du composant `Card` utilisait `customImage` sans g√©n√©rer dynamiquement le chemin
- Correction apport√©e :
  - Suppression de `customImage`
  - Ajout d‚Äôune fonction `clean()` pour g√©n√©rer le nom de fichier √† partir des props
  - Int√©gration directe du chemin dans le composant `Card`

---

Backlog :

- Le composant `Card` utilise maintenant `make`, `model`, `year` pour g√©n√©rer le chemin de l‚Äôimage
#NOM?
- Le bug persiste malgr√© la correction, ce qui sugg√®re :
  - un probl√®me de nom de fichier dans `public/images/cards/`
  - un souci de build ou de cache
  - ou une erreur silencieuse c√¥t√© Next.js

---

## üìå √Ä V√©rifier

- Que les fichiers dans `public/images/cards/` respectent bien la convention de nommage
- Que les noms sont en minuscules, sans accents, et avec tirets
- Que le build Next.js inclut bien les fichiers du dossier `public`
- Que le serveur local ou distant ne bloque pas l‚Äôacc√®s aux images
Human,tu as plant√© recommence
Discussion sur le projet Apex Collector,2025-08-21T12:51:58,AI,"Bien s√ªr Etienne, voici un **r√©sum√© complet et technique** de tout ce que j‚Äôai appris sur ton projet **Apex Collector** au fil de notre √©change, pr√™t √† √™tre transmis √† un autre chat, collaborateur ou document technique :



### üì¶ Structure des donn√©es

Chaque carte repr√©sente une voiture avec les propri√©t√©s suivantes :

```ts
type CardProps = {
  make: string
  model: string
  year: string
  power_hp: string
  torque_nm: string
  max_speed_kmh: string
  acceleration_0_100: string
  weight_t: string
  transmission?: 'FWD' | 'RWD' | 'AWD'
  count?: number
  size?: 'md' | 'lg'
  showLevel?: boolean
}
```

---

### üñºÔ∏è Gestion des images

- Les images sont stock√©es dans `public/images/cards/`
- Le nom de chaque image suit la convention :  
  `marque-modele-ann√©e.jpg` ‚Üí ex. `ferrari-f50-1995.jpg`
- Le chemin est g√©n√©r√© dynamiquement dans le composant `Card` :

```ts
const clean = (str: string) =>
  str.normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/\s+/g, '-')
    .toLowerCase()

const imageName = `${clean(make)}-${clean(model)}-${year}.jpg`
const imageSrc = `/images/cards/${imageName}`
```

- Le fallback vers une image par d√©faut (`default.jpg`) est g√©r√© ailleurs dans l‚Äôapp (pas dans le composant `Card`)

---

### üìä Calculs dynamiques

- **Indice de performance (IP)** : calcul√© √† partir de la puissance et du poids

```ts
const ip = parsedPower && parsedWeight
  ? Math.floor((parsedPower / (parsedWeight * 1000)) * 1000)
###############################################################################################################################################################################################################################################################
```

- Affich√© via le composant `<IPBadge />`

---

### üß© Composants int√©gr√©s

- `CardLevelBadge` : badge de niveau (rare, √©pique, etc.)
- `IPBadge` : badge de performance
- `Stat` : ic√¥ne + valeur pour chaque caract√©ristique technique
- `CardModalContext` : permet d‚Äôouvrir une carte en modal via `setActiveCard`

---

### üß™ Probl√®me rencontr√©

- Les images ne s‚Äôaffichaient plus, seule l‚Äôimage par d√©faut apparaissait
- Cause identifi√©e : la logique initiale du composant `Card` ne g√©n√©rait pas dynamiquement le chemin de l‚Äôimage √† partir des props
- Correction apport√©e : g√©n√©ration du nom de fichier avec nettoyage (`clean`) et suppression de la logique `customImage`

---

- Le composant `Card` a √©t√© corrig√© pour g√©n√©rer dynamiquement le chemin de l‚Äôimage
- Le fallback est conserv√© ailleurs dans l‚Äôapp
- Le bug d‚Äôaffichage persiste malgr√© la correction, ce qui sugg√®re :
  - soit un probl√®me de nom de fichier dans `public/images/cards/`
  - soit un souci de build ou de cache
  - soit une erreur silencieuse c√¥t√© Next.js




Bien s√ªr Etienne ‚Äî voici un r√©sum√© technique complet de la premi√®re partie de notre conversation, avant que l‚Äôon bascule sur le projet de cartes v√©hicules. Ce r√©sum√© est con√ßu pour une passation fluide √† un autre d√©veloppeur ou pour reprendre le fil dans une future session.

---

**Refonte et nettoyage du fichier `globals.css`**

### üéØ Objectif
Corriger et stabiliser le fichier `globals.css` pour :
- Neutraliser les overlays et styles inject√©s en d√©veloppement.
- Appliquer des animations et effets visuels sp√©cifiques aux cartes.
- Garantir une base Tailwind propre et extensible.

---

## üìÑ Fichier concern√© : `globals.css`

### ‚úÖ Nettoyages appliqu√©s
- Suppression des overlays fixes en dev :
  ```css
  body > div[style*="position:fixed"],
  .dot_net {
    display: none !important;
  }

  body > * {
    pointer-events: auto !important;
  }

  [data-nextjs-dev-tool-style] {
    all: unset !important;
    display: none !important;
  }
  ```

### ‚úÖ Structure Tailwind
```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

### ‚úÖ Variables CSS
```css
:root {
  --foreground-rgb: 255, 255, 255;
  --background-rgb: 0, 0, 0;
}
```

### ‚úÖ Styles globaux
```css
html, body {
  color: rgb(var(--foreground-rgb));
  background: rgb(var(--background-rgb)) !important;
  min-height: 100vh;
}
```

---

## ‚ú® Animations et effets visuels

### üîπ Animation foil brillante
```css
@keyframes foil { ... }
.animate-foil {
  background-size: 300% 300%;
  animation: foil 4s infinite linear;
  mix-blend-mode: overlay;
  opacity: 0.3;
  transition: opacity 0.3s ease-in-out;
  transform: rotateZ(0.0001deg);
}
```

### üîπ Animation fade-in
```css
@keyframes fade-in { ... }
.animate-fade-in {
  animation: fade-in 0.5s ease-out;
}
```

### üîπ Animation booster reveal
```css
@keyframes boosterReveal { ... }
.booster-card {
  animation: boosterReveal 0.6s ease-out forwards;
  transform-origin: center;
  perspective: 1000px;
}
```

---

## üß© Comportements sp√©cifiques

### üîπ Placeholder visuel pour cartes sans image
```css
.card-placeholder {
  background: repeating-linear-gradient(-45deg, #2a2a2a 0px, #2a2a2a 10px, #333 10px, #333 20px);
  color: white;
  font-size: 0.8rem;
  display: flex;
  align-items: center;
  justify-content: center;
}
```

### üîπ Hover raret√©
```css
.rarete-epic:hover {
  box-shadow: 0 0 12px 4px rgba(118, 0, 226, 0.5);
}
.rarete-legend:hover {
  box-shadow: 0 0 16px 6px rgba(255, 166, 0, 0.6);
}
```

---

## üß™ Hook React compl√©mentaire : `useDevCleanup.ts`

### ‚úÖ Objectif
Supprimer dynamiquement les styles inject√©s et overlays en mode d√©veloppement.

### ‚úÖ Fonctionnement
- Supprime `[data-nextjs-dev-tool-style]`
- Supprime `.dot_net`
- Supprime tout `div` fixe non `#__next`
- Observe le DOM en continu via `MutationObserver`

### ‚úÖ Usage
√Ä placer dans `CreateCard.tsx` :
```tsx
import { useDevCleanup } from '@/hooks/useDevCleanup'
useDevCleanup()

---

## üß± 1. Stabilisation du socle technique (priorit√© haute)

‚úÖ **Objectif** : garantir que l‚Äôinterface est fonctionnelle, sans bugs bloquants.

- [x] Corriger le d√©bordement de l‚Äôimage de fond (`<Image fill />`) ‚Üí ‚úÖ fait avec fallback `<img>` ou conteneur `relative`.
- [x] Assurer que le header reste au-dessus (`z-[999]`) ‚Üí ‚úÖ int√©gr√© dans `CreateCard.tsx`.
- [x] V√©rifier que tous les composants interactifs (formulaires, boutons) sont accessibles et visibles.
- [ ] Supprimer les warnings Next/Image restants (si tu r√©introduis `fill`, bien v√©rifier le parent direct).
- [ ] Ajouter un mode debug visuel (ex: `border-red-500` sur les zones interactives) pour tester l‚Äôempilement.

---

## üé® 2. Am√©lioration UX/UI

‚úÖ **Objectif** : rendre l‚Äôinterface plus intuitive et agr√©able √† utiliser.

- [ ] Ajouter des transitions fluides entre les √©tapes (ex: apparition du cropper, validation de la carte).
- [ ] Ajouter un indicateur de raret√© visuel (ex: halo anim√©, badge color√©).
- [ ] Permettre le drag & drop d‚Äôimage dans le panneau de cr√©ation.
- [ ] Ajouter un bouton ‚ÄúR√©initialiser la carte‚Äù avec confirmation.

---

## üß† 3. Logique m√©tier et donn√©es

‚úÖ **Objectif** : enrichir la logique de cr√©ation et de calcul.

- [ ] Calcul dynamique du niveau de carte selon le `count` (d√©j√† partiellement g√©r√© via `getCardLevel`).
- [ ] Calcul de l‚ÄôIP (indice de performance) avec arrondi et validation.
- [ ] Ajout d‚Äôun syst√®me de ‚Äúpoints de raret√©‚Äù selon les stats (ex: si HP > 500 ‚Üí +1 raret√©).
- [ ] Validation des champs (ex: ann√©e entre 1950 et 2025, poids > 0).

---

## üíæ 4. Sauvegarde et export

‚úÖ **Objectif** : permettre √† l‚Äôutilisateur de conserver ou partager sa carte.

- [ ] Ajouter un bouton ‚ÄúExporter la carte‚Äù (image ou JSON).
- [ ] Ajouter une fonction ‚ÄúCopier dans le presse-papier‚Äù (donn√©es ou visuel).
- [ ] Int√©grer une sauvegarde locale (localStorage ou IndexedDB).
- [ ] Pr√©parer une API POST pour enregistrer la carte c√¥t√© serveur (si backend pr√©vu).

---

## üß™ 5. Tests et fiabilit√©

‚úÖ **Objectif** : s‚Äôassurer que tout fonctionne dans tous les cas.

- [ ] Tester sur mobile (responsive, cropper, interactions).
- [ ] Tester avec des images tr√®s grandes ou tr√®s petites.
- [ ] V√©rifier que le cropper ne bloque pas le scroll ou les clics.
- [ ] Ajouter des tests unitaires simples (ex: calcul IP, niveau).

---

## üöÄ 6. Extensions futures (optionnel)

‚úÖ **Objectif** : ouvrir le projet √† plus de fonctionnalit√©s.

- [ ] Ajouter un syst√®me de raret√© al√©atoire (booster pack).
- [ ] Int√©grer un mode ‚Äú√©dition avanc√©e‚Äù (couleurs, typographie).
- [ ] Les profils pourront etres consultable par d'autres joueurs pour voir leur succes etc. La carte phare


Cr√©er une interface d‚Äôouverture de booster dans ton application de cartes, avec les √©tapes suivantes :
- S√©lection d‚Äôun booster dans une grille
- Animation d‚Äôouverture du pack
- Apparition des cartes en dos
- Flip individuel ou ‚ÄúTout retourner‚Äù
- Ajout des cartes √† la collection (cartes ou circuits)

üì¶ Fichiers cl√©s utilis√©s
- useRandomBoosters.ts : hook qui g√©n√®re les cartes via generateBooster(count)
- BoosterPage.tsx : page principale avec la grille de boosters et la modale
- BoosterOpeningAnimation.tsx : composant modale avec animation + grille de cartes
- FlippableCard.tsx : composant pour flip individuel des cartes
- addToCollection.ts : fonction qui ajoute les cartes ou circuits √† la base Supabase
- BoosterGrid.tsx + BoosterCard.tsx : affichage des boosters dans une grille styl√©e

üé® Comportement final obtenu
- La page affiche une grille responsive de boosters avec sidebar
- Au clic sur un booster :
- Une modale plein √©cran s‚Äôouvre
- Le booster pack s‚Äôaffiche et flippe automatiquement apr√®s 800 ms
- Les 5 cartes apparaissent en ligne, centr√©es
- Deux boutons en dessous : ‚ÄúTout retourner‚Äù et ‚ÄúAjouter √† ma collection‚Äù
- Les cartes peuvent √™tre retourn√©es individuellement ou toutes √† la fois
- L‚Äôajout √† la collection g√®re les cartes et les circuits via Supabase

üõ†Ô∏è Probl√®mes rencontr√©s et corrig√©s
- Modale trop petite ‚Üí corrig√©e avec layout fullscreen
- Cartes mal affich√©es ‚Üí corrig√© en passant card.data √† Card
- Boutons mal positionn√©s ‚Üí d√©plac√©s sous la grille
- Erreur HMR CSS ‚Üí patch dans next.config.js
- Flip du booster sans affichage des cartes ‚Üí corrig√© avec loading et cards.length

‚úÖ √âtat actuel
Tout fonctionne :
- Layout responsive
- 
- Animation fluide
- Ajout √† la collection
- UX propre et intuitive
Tu peux maintenant repartir sur un nouveau chat avec ce r√©sum√©, et je pourrai t‚Äôaider √† continuer ou √† int√©grer d‚Äôautres fonctionnalit√©s (sons, effets, transitions, etc.).
Pr√™t pour la suite üí™



